# This workflow will perform the following steps for pushes the the develop branch
# * build the Schema and the Guidelines with Ant
# * publish the Schema to music-encoding/schema under ./dev
# * publish the Guidelines to music-encoding/guidelines under ./dev

name: Deploy Schema and Guidelines

on:
  workflow_dispatch: # trigger manually

env:
  # schema
  SCHEMA_REPO: ${{ github.repository_owner }}/schema
  SCHEMA_BRANCH: main

  # test
  MUSIC-ENCODING_REPO : music-encoding/music-encoding
  MUSIC-ENCODING_BRANCH: pdf-guidelines
  MUSIC-ENCODING_DIR: test-dir

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      ### BUIDLING THE SCHEMA AND THE GUIDELINES ###
      - name: Checkout main repo
        uses: actions/checkout@v2

      - name: Checkout MUSIC-ENCODING_REPO into MUSIC-ENCODING_DIR
        uses: actions/checkout@v2
        with:
          # repository to check out
          repository: ${{ env.MUSIC-ENCODING_REPO }}
          # ref (branch, tag or SHA) to check out
          ref: ${{ env.MUSIC-ENCODING_BRANCH }}
          # relative path under $GITHUB_WORKSPACE to place the repository
          path: ${{ env.MUSIC-ENCODING_DIR }}
          # Whether to checkout submodules: `true` to checkout submodules or `recursive` to
          # recursively checkout submodules.
          submodules: recursive

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Build with Ant
        # For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-ant
        working-directory: ${{ env.MUSIC-ENCODING_DIR }}
        run: |
          ant -noinput -buildfile build.xml init
          ant -noinput -buildfile build.xml -lib lib/saxon/saxon-he-10.5.jar -Dgithub.sha=${{ github.sha }}

      - name: Verify
        run: | 
          cd ${{ env.MUSIC-ENCODING_DIR }}/dist/guidelines/dev/images/generatedLiveExamples
          pwd
          ls -R

      - name: Render live MEI image samples to SVG
        # For more information see: https://github.com/Edirom/staticVerovioConverter
        # MEI files are taken from and SVGs are placed into folder: /source/examples/verovio
        working-directory: ${{ env.MUSIC-ENCODING_DIR }}/dist/guidelines/dev/images/generatedLiveExamples
        run: |
          docker run --rm -v $(pwd):/data edirom/staticverovioconverter:latest
   
      - name: Verify
        run: |
          cd ${{ env.MUSIC-ENCODING_DIR }}/dist/guidelines/dev/images/generatedLiveExamples
          pwd
          ls -R
   
      - name: Verify
        run: |
          cd ${{ env.MUSIC-ENCODING_DIR }}/dist/guidelines/dev/
          pwd
          ls -R

      - name: Generate complete PDF with PrinceXML 
        # For more information see: https://www.princexml.com/
        working-directory: ${{ env.MUSIC-ENCODING_DIR }}
        run: docker run --rm -v $(pwd):/out yeslogic/prince:14.2 /out/dist/guidelines/dev/MEI_Guidelines_*.html -o /out/exampleGuidelines.pdf --log /out/princeLog.txt
